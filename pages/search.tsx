import type { NextPage } from "next";
import Head from "next/head";
import styled from "styled-components";

import { AppDispatch, useTypedSelector } from "@/store";
import { useDispatch } from "react-redux";
import {
  selectProducts,
  setcurrentPage,
  setproductsPerPage,
} from "@/store/productsSlicer";
import { useGetProductsQuery } from "@/store/useGetProductQuery";

import ProductsLoad from "@/components/Home/ProductCardsLoad";
import SearchProducts from "@/components/Home/SearchProducts";
import { Table } from "@/components/Home/NewProducts";
import Footer from "@/components/General/Footer";

const Forum: NextPage = () => {
  const dispatch: AppDispatch = useDispatch();

  const { currentPage, productsPerPage, searchTerm, category } =
    useTypedSelector(selectProducts);

  const {
    data,
    isLoading: loading,
    isFetching,
    error,
    refetch,
  } = useGetProductsQuery({
    currentPage,
    productsPerPage,
    searchTerm,
    category,
  });

  const p = data && data.numberOfPages;

  const pages = Array.from(new Array(p), (val, index) => index + 1);

  const options = ["3", "5", "10", "30"];

  return (
    <div>
      <Head>
        <title>New E-Commerce</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Main style={{ paddingTop: "70px" }}>
        <div>
          <div
            style={{
              display: "flex",
              justifyContent: "space-between",
              margin: "10px",
            }}
          >
            <NumPages>
              <span style={{ margin: "10px" }}>pages:</span>
              {pages.map((page, i) => (
                <div
                  key={i}
                  onClick={() => {
                    dispatch(setcurrentPage(page));
                  }}
                  className={`${page == currentPage ? "current" : ""}`}
                >
                  {page}
                </div>
              ))}
            </NumPages>
            <NumItems>
              <div>products per page</div>
              <select
                onChange={(e) => {
                  dispatch(setproductsPerPage(e.target.value));
                  dispatch(setcurrentPage(1));
                }}
              >
                {options.map((number, i) => (
                  <option
                    key={i}
                    value={number}
                    selected={number == "5" && true}
                  >
                    {number}
                  </option>
                ))}
              </select>
            </NumItems>
          </div>
          <Table>{loading && <ProductsLoad />}</Table>
          <SearchProducts />
        </div>
        <Footer />
      </Main>
    </div>
  );
};

export default Forum;

const Main = styled.main`
  min-height: 100vh;
  background-color: white;

  h1 {
    color: black;
  }
`;

const NumPages = styled.div`
  width: 50%;

  display: flex;
  flex-wrap: wrap;
  align-items: center;

  div {
    width: 30px;
    height: 30px;

    border: 1px #aaa solid;
    cursor: pointer;

    display: grid;
    place-items: center;
  }

  .current {
    background: #bbbbbb;
    color: white;
  }
`;

const NumItems = styled.div`
  height: 50px;

  display: flex;
  align-items: center;

  div {
    margin: 10px;
  }
`;
